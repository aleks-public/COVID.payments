#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СформироватьМассивВыгружаемыхДанных(ТекВетка, МассивВыгружаемыхДанных)
	Для каждого Элемент из ТекВетка.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Элемент.Сотрудник) Тогда
			ДобавляемаяСтруктура = Новый Структура;
			ДобавляемаяСтруктура.Вставить("Подразделение", Элемент.Подразделение);
			ДобавляемаяСтруктура.Вставить("Сотрудник", Элемент.Сотрудник);
			ДобавляемаяСтруктура.Вставить("ДатаНачала", Элемент.ДатаНачала);
			ДобавляемаяСтруктура.Вставить("ДатаОкончания", Элемент.ДатаОкончания);
			ДобавляемаяСтруктура.Вставить("КоличествоСмен", Элемент.КоличествоСмен);
			ДобавляемаяСтруктура.Вставить("Должность", Элемент.Должность);
			ДобавляемаяСтруктура.Вставить("ДолжностьПоШтатномуРасписанию", Элемент.ДолжностьПоШтатномуРасписанию);
			ДобавляемаяСтруктура.Вставить("КоличествоСтавок", Элемент.КоличествоСтавок);
			ДобавляемаяСтруктура.Вставить("ФизическоеЛицо", Элемент.ФизическоеЛицо);
			ДобавляемаяСтруктура.Вставить("ИдентификаторСтроки", Элемент.ПолучитьИдентификатор());
			
			МассивВыгружаемыхДанных.Добавить(ДобавляемаяСтруктура);
		Иначе
			СформироватьМассивВыгружаемыхДанных(Элемент, МассивВыгружаемыхДанных);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроверитьМассивВыгружаемыхДанных(МассивВыгружаемыхДанных)
	ПроверяемыеДолжности = Новый Массив;
	
	Результат = Новый Структура;
	ЕстьОшибки = Ложь;
	
	ИмяКолонки = "Должность";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") = Истина Тогда
		ИмяКолонки = "ДолжностьПоШтатномуРасписанию";
	КонецЕсли;
	
	Для каждого ТекСтрока из МассивВыгружаемыхДанных Цикл
		Если ПроверяемыеДолжности.Найти(ТекСтрока[ИмяКолонки]) = Неопределено Тогда
			ПроверяемыеДолжности.Добавить(ТекСтрока[ИмяКолонки]);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Должности.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Должности КАК Должности
	                      |ГДЕ
	                      |	Должности.Ссылка В (&ПроверяемыеДолжности)
	                      |	И Должности.COVID_КатегорияМедицинскихРаботников = ЗНАЧЕНИЕ(Справочник.COVID_КатегорииМедицинскихРаботников.пустаяссылка)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ШтатноеРасписание.Ссылка
	                      |ИЗ
	                      |	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	                      |ГДЕ
	                      |	ШтатноеРасписание.Ссылка В (&ПроверяемыеДолжности)
	                      |	И ШтатноеРасписание.COVID_КатегорияМедицинскихРаботников = ЗНАЧЕНИЕ(Справочник.COVID_КатегорииМедицинскихРаботников.пустаяссылка)");
	Запрос.УстановитьПараметр("ПроверяемыеДолжности", ПроверяемыеДолжности);
	
	НезаполненныеДолжности = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Результат.Вставить("Должности", НезаполненныеДолжности);
	ЕстьОшибки = ЕстьОшибки или ЗначениеЗаполнено(НезаполненныеДолжности.Количество());
	
	Если не ЗначениеЗаполнено(Объект.Организация.COVID_РегистрационныйНомер) 
		или СтрДлина(Объект.Организация.COVID_КПП) <> Метаданные.Справочники.Организации.Реквизиты.COVID_КПП.Тип.КвалификаторыСтроки.Длина Тогда
		ЕстьОшибки = Истина;
		Результат.Вставить("Организация", Объект.Организация);
	Иначе
		Результат.Вставить("Организация", Неопределено);
	КонецЕсли;
	
	Результат.Вставить("ЕстьОшибки", ЕстьОшибки);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПроверкаПередЗаполнением(Отказ)
	Ошибки = Неопределено;
	Если не ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ПериодРегистрации", "Не задан период регистрации");
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.Организация", "Не задана организация");
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.Исполнитель", "Не задан исполнитель");
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатФормированияФайла(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ДД = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.МножественныйВыбор = Ложь;
		Диалог.Фильтр = "*.xml|*.xml";
		Если Диалог.Выбрать() Тогда
			ДД.Записать(Диалог.ПолноеИмяФайла);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Произошла ошибка при выгрузке: " + Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКВыгрузкеНаСервере()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	COVID_ДанныеОбОплаченныхСменах.Сотрудник КАК Сотрудник,
	                      |	СУММА(COVID_ДанныеОбОплаченныхСменах.КоличествоСмен) КАК КоличествоСмен,
	                      |	COVID_ДанныеОбОплаченныхСменах.Подразделение КАК Подразделение,
	                      |	COVID_ДанныеОбОплаченныхСменах.Должность КАК Должность,
	                      |	COVID_ДанныеОбОплаченныхСменах.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
	                      |	COVID_ДанныеОбОплаченныхСменах.КоличествоСтавок КАК КоличествоСтавок,
	                      |	COVID_ДанныеОбОплаченныхСменах.ФизическоеЛицо КАК ФизическоеЛицо,
	                      |	COVID_ДанныеОбОплаченныхСменах.ДатаНачала КАК ДатаНачала,
	                      |	COVID_ДанныеОбОплаченныхСменах.ДатаОкончания КАК ДатаОкончания,
	                      |	ИСТИНА КАК Выгружать
	                      |ИЗ
	                      |	РегистрСведений.COVID_ДанныеОбОплаченныхСменах КАК COVID_ДанныеОбОплаченныхСменах
	                      |ГДЕ
	                      |	COVID_ДанныеОбОплаченныхСменах.Период = &Период
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	COVID_ДанныеОбОплаченныхСменах.Сотрудник,
	                      |	COVID_ДанныеОбОплаченныхСменах.Подразделение,
	                      |	COVID_ДанныеОбОплаченныхСменах.Должность,
	                      |	COVID_ДанныеОбОплаченныхСменах.ДолжностьПоШтатномуРасписанию,
	                      |	COVID_ДанныеОбОплаченныхСменах.ФизическоеЛицо,
	                      |	COVID_ДанныеОбОплаченныхСменах.ДатаНачала,
	                      |	COVID_ДанныеОбОплаченныхСменах.ДатаОкончания,
	                      |	COVID_ДанныеОбОплаченныхСменах.КоличествоСтавок
	                      |ИТОГИ
	                      |	МАКСИМУМ(Выгружать)
	                      |ПО
	                      |	Подразделение");
	Запрос.УстановитьПараметр("Период", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Дерево, "КВыгрузке");
КонецПроцедуры

&НаСервере
Функция ВыгрузитьНаСервере(ПараметрыВыполненияОперации)
	//Обработки.COVID_ВыгрузкаНачислений.СформироватьВыгрузкуФайла(ПараметрыВыполненияОперации);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.COVID_ВыгрузкаНачислений.СформироватьВыгрузкуФайла", ПараметрыВыполненияОперации);
КонецФункции

&НаСервере
Процедура ИнициализироватьДанныеНаСервере()
	ВидИспользованияРабочегоВремени = Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Отработано с пациентами, больными COVID-19");
	Если ВидИспользованияРабочегоВремени.Пустая() Тогда
		ВидИспользованияРабочегоВремени = Справочники.ВидыИспользованияРабочегоВремени.СоздатьЭлемент();
		ВидИспользованияРабочегоВремени.БуквенныйКод = "К19";
		ВидИспользованияРабочегоВремени.ЦифровойКод = "19";
		ВидИспользованияРабочегоВремени.БуквенныйКодБюджетный = "К19";
		ВидИспользованияРабочегоВремени.БуквенныйКодБюджетный2009 = "19";
		ВидИспользованияРабочегоВремени.Наименование = "Отработано с пациентами, больными COVID-19";
		ВидИспользованияРабочегоВремени.ПолноеНаименование = "Отработано с пациентами, больными COVID-19";
		ВидИспользованияРабочегоВремени.РабочееВремя = Истина;
		ВидИспользованияРабочегоВремени.ОсновноеВремя = Справочники.ВидыИспользованияРабочегоВремени.Явка;
		ВидИспользованияРабочегоВремени.Записать();
		ВидИспользованияРабочегоВремени = ВидИспользованияРабочегоВремени.Ссылка;
	КонецЕсли;
	
	Макет = Справочники.COVID_КатегорииМедицинскихРаботников.ПолучитьМакет("COVID_КатегорииМедицинскихРаботников");
	Для Сч = 1 По Макет.ВысотаТаблицы Цикл
		Код = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Макет.Область(Сч, 1).Текст);
		КатегорияМедицинскихРаботников = Справочники.COVID_КатегорииМедицинскихРаботников.НайтиПоКоду(Код);
		Если КатегорияМедицинскихРаботников.Пустая() Тогда
			КатегорияМедицинскихРаботников = Справочники.COVID_КатегорииМедицинскихРаботников.СоздатьЭлемент();
			КатегорияМедицинскихРаботников.Код = Код;
			КатегорияМедицинскихРаботников.Наименование = Макет.Область(Сч, 2).Текст;
			КатегорияМедицинскихРаботников.COVID_СуммаВыплаты = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Макет.Область(Сч, 3).Текст);
			КатегорияМедицинскихРаботников.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ДействияФормы

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	
	//Для совместимости
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	//Для совместимости	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);

КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Объект.ПериодРегистрации = НачалоМесяца(ТекущаяДата());
	МесяцНачисленияСтрокой = Формат(Объект.ПериодРегистрации, "ДФ='MMMM yyyy""г.""'");
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКВыгрузке(Команда)
	Отказ = Ложь;
	ПроверкаПередЗаполнением(Отказ);
	Если не Отказ Тогда
		ОбновитьКВыгрузкеНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, МесяцРасчета", 
								"Объект.Организация", "Объект.Ответственный", "Объект.ПериодРегистрации");
		
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
	Объект.Исполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ответственный, "ФизическоеЛицо");
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьДанные(Команда)
	ИнициализироватьДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КВыгрузкеВыгружатьПриИзменении(Элемент)
	ТекущаяСтрока = КВыгрузке.НайтиПоИдентификатору(Элементы.КВыгрузке.ТекущаяСтрока);
	Для каждого ТекЭлемент из ТекущаяСтрока.ПолучитьЭлементы() Цикл
		ТекЭлемент.Выгружать = ТекущаяСтрока.Выгружать;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	МассивВыгружаемыхДанных = Новый Массив;
	СформироватьМассивВыгружаемыхДанных(КВыгрузке, МассивВыгружаемыхДанных);
	
	ДанныеОбОшибках = ПроверитьМассивВыгружаемыхДанных(МассивВыгружаемыхДанных);
	Если ДанныеОбОшибках.ЕстьОшибки Тогда
		МассивНезаполненныхДожностей = ДанныеОбОшибках.Должности;
		Для каждого НезаполненнаяДолжность из МассивНезаполненныхДожностей Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено поле '(COVID) Категория медицинских работников' для должности " + НезаполненнаяДолжность,
				НезаполненнаяДолжность, "COVID_КатегорияМедицинскихРаботников", "Объект");
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеОбОшибках.Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено поле '(COVID) Регистрационный номер для организации' или '(COVID) КПП' " + ДанныеОбОшибках.Организация,
				ДанныеОбОшибках.Организация, "COVID_РегистрационныйНомер", "Объект");
		КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполненияОперации = ПолучитьСтруктуруПараметровЗаполненияФайла(МассивВыгружаемыхДанных);
	ДлительнаяОперация = ВыгрузитьНаСервере(ПараметрыВыполненияОперации);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатФормированияФайла", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровЗаполненияФайла(МассивВыгружаемыхДанных)
	ПараметрыВыполненияОперации = Новый Структура();
	ПараметрыВыполненияОперации.Вставить("МассивВыгружаемыхДанных", МассивВыгружаемыхДанных);
	ПараметрыВыполненияОперации.Вставить("Организация", Объект.Организация);
	ПараметрыВыполненияОперации.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	
	СтруктураИсполнителя = Новый Структура;
	СтруктураИсполнителя.Вставить("Исполнитель", Объект.Исполнитель);
	ПараметрыВыполненияОперации.Вставить("Ответственный", СтруктураИсполнителя);
	
	Возврат ПараметрыВыполненияОперации;
КонецФункции

#КонецОбласти
